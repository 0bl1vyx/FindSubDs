#!/bin/bash

# --- Colors ---
# Using tput for compatibility and to avoid hardcoded escape sequences
RED=$(tput setaf 1)
GRN=$(tput setaf 2)
YLW=$(tput setaf 3)
BLU=$(tput setaf 4)
MAG=$(tput setaf 5)
CYN=$(tput setaf 6)
WHT=$(tput setaf 7)
BOLD=$(tput bold)
NC=$(tput sgr0) # No Color

# --- UI Functions ---
spinner_with_updates() {
    local pid=$1
    local name=$2
    local spin=('⠋' '⠙' '⠹' '⠸' '⠼' '⠴' '⠦' '⠧' '⠇' '⠏')
    local i=0
    tput civis
    while kill -0 "$pid" 2>/dev/null; do
        printf "\r${MAG}${spin[$i]}${NC} ${BOLD}${name}...${NC}"
        i=$(( (i + 1) % 10 ))
        sleep 0.1
    done
    printf "\r$(tput el)" # Clear the line
    tput cnorm
}

banner() {
    echo -e "${BLU}${BOLD}"
    echo '    ┌─┐┬ ┬┌┐ ┌─┐┌┬┐┌─┐┌─┐┌─┐'
    echo '    ├─┤└┬┘├┴┐└─┐ │ ├─┘┌─┘┌─┘'
    echo '    ┴ ┴ ┴ └─┘└─┘ ┴ ┴  └─┘└─┘ v2.7' # Version bump
    echo -e "         ${NC}${CYN}by 0bl1vyx${NC}"
}

stage() {
    echo -e "\n${BLU}${BOLD}[ ${WHT}⚙️  ${BLU}] ${WHT}${1}${NC}"
}

summary() {
    local total_subs=$1
    local live_subs=$2
    local output_file=$3
    local duration=$4

    echo -e "\n${GRN}${BOLD}╭───────────────────────────────────────────────────╮${NC}"
    echo -e "${GRN}${BOLD}│${NC}                ${WHT}🎉 Scan Summary 🎉${NC}                ${GRN}${BOLD}│${NC}"
    echo -e "${GRN}${BOLD}├───────────────────────────────────────────────────┤${NC}"
    echo -e "${GRN}${BOLD}│${NC} ${CYN}⏱️  Run time:${NC}       ${WHT}${duration} seconds${NC}"
    echo -e "${GRN}${BOLD}│${NC} ${CYN}📦 Total subdomains:${NC} ${WHT}${total_subs}${NC}"
    echo -e "${GRN}${BOLD}│${NC} ${CYN}🌐 Live subdomains:${NC}  ${WHT}${live_subs}${NC}"
    echo -e "${GRN}${BOLD}│${NC} ${CYN}💾 Output files:${NC}     ${YLW}${output_file}, ${LIVEOUT}${NC}"
    echo -e "${GRN}${BOLD}╰───────────────────────────────────────────────────╯${NC}\n"
}

usage() {
    banner
    echo -e "\n${WHT}A fast, parallel subdomain enumeration script that combines passive and active techniques.${NC}"
    echo -e "\n${BOLD}USAGE:${NC}"
    echo -e "    $0 -d <domain> -o <all_subs.txt> -l <live_subs.txt> [OPTIONS]"
    echo -e "\n${BOLD}REQUIRED ARGUMENTS:${NC}"
    echo -e "    ${YLW}-d${NC}    Target domain (e.g., example.com)"
    echo -e "    ${YLW}-o${NC}    Output file for all unique subdomains found"
    echo -e "    ${YLW}-l${NC}    Output file for live subdomains (responding to HTTP/S)"
    echo -e "\n${BOLD}OPTIONAL ARGUMENTS:${NC}"
    echo -e "    ${YLW}-w${NC}    Path to a wordlist for subdomain brute-forcing with puredns"
    echo -e "    ${YLW}-r${NC}    Path to a file of valid DNS resolvers for puredns"
    echo -e "    ${YLW}-p${NC}    Run permutations with alterx (Very Time Cosuming)"
    echo -e "    ${YLW}-v${NC}    Verbose mode. Disables spinners and shows tool output."
    echo -e "    ${YLW}-h${NC}    Display this help menu and exit"
    echo -e "\n${BOLD}EXAMPLE:${NC}"
    echo -e "    ${CYN}$0 -d example.com -o subs.txt -l live.txt -w words.txt -r resolvers.txt -v${NC}\n"
    exit 1
}


# --- Argument Parsing ---
PERMUTE_FLAG=0
VERBOSE_FLAG=0
while getopts "d:o:l:w:r:phv" opt; do
  case $opt in
    d) DOMAIN=$OPTARG ;;
    o) OUTPUT=$OPTARG ;;
    l) LIVEOUT=$OPTARG ;;
    w) WORDLIST=$OPTARG ;;
    r) RESOLVERS=$OPTARG ;;
    p) PERMUTE_FLAG=1 ;;
    v) VERBOSE_FLAG=1 ;;
    h) usage ;;
    *) usage ;;
  esac
done

# --- Prerequisite Checks ---

for tool in subfinder findomain dnsx httpx puredns alterx comm sort; do
  if ! command -v "$tool" >/dev/null 2>&1; then
    echo -e "${RED}${BOLD}[✘] Tool missing: ${tool}. Please install it first.${NC}"
    exit 1
  fi
done

# Validate required arguments
if [[ -z "$DOMAIN" || -z "$OUTPUT" || -z "$LIVEOUT" ]]; then
  usage
fi

# Validate optional brute-force arguments
if [[ (-n "$WORDLIST" && -z "$RESOLVERS") || (-z "$WORDLIST" && -n "$RESOLVERS") ]]; then
    echo -e "${RED}${BOLD}[!] Both -w (wordlist) and -r (resolvers) must be provided together for brute-forcing.${NC}"
    exit 1
fi
if [[ -n "$WORDLIST" && ! -f "$WORDLIST" ]]; then
    echo -e "${RED}${BOLD}[!] Wordlist file not found: $WORDLIST${NC}"
    exit 1
fi
if [[ -n "$RESOLVERS" && ! -f "$RESOLVERS" ]]; then
    echo -e "${RED}${BOLD}[!] Resolvers file not found: $RESOLVERS${NC}"
    exit 1
fi


# Check for existing output files
if [[ -f "$OUTPUT" || -f "$LIVEOUT" ]]; then
  echo -e "${YLW}${BOLD}[!] Output file(s) already exist. Overwrite? [y/N]${NC}"
  read -r confirm
  if [[ "$confirm" != "y" && "$confirm" != "Y" ]]; then
    echo -e "${RED}${BOLD}[✘] Operation aborted by user.${NC}"
    exit 1
  fi
fi

# --- Main Execution ---
start_time=$SECONDS
clear
banner

echo -e "\n${WHT}${BOLD}TARGET:${NC} ${YLW}$DOMAIN${NC}"
echo -e "${WHT}${BOLD}OUTPUT:${NC} ${YLW}$OUTPUT${NC} | ${WHT}${BOLD}LIVE:${NC} ${YLW}$LIVEOUT${NC}"
MODE="Passive"
if [[ -n "$WORDLIST" ]]; then
    MODE="Passive + Brute-Force"
fi
if [[ "$PERMUTE_FLAG" -eq 1 ]]; then
    MODE="${MODE} + Permutations"
fi
if [[ "$VERBOSE_FLAG" -eq 1 ]]; then
    MODE="${MODE} + Verbose"
fi
echo -e "${WHT}${BOLD}MODE:   ${YLW}${MODE}${NC}"


# Temp files
SUBF=$(mktemp)
FINDO=$(mktemp)
BRUTE=$(mktemp)
RESOLVED=$(mktemp)
PERMUTE_OUT=$(mktemp)
ALREADY_RESOLVED=$(mktemp)
NEEDS_RESOLUTION=$(mktemp)

trap 'rm -f "$SUBF" "$FINDO" "$BRUTE" "$RESOLVED" "$PERMUTE_OUT" "$ALREADY_RESOLVED" "$NEEDS_RESOLUTION"; tput cnorm' EXIT


# --- [MODIFIED BLOCK 1: Passive] ---
stage "Running passive enumeration tools in parallel"
if [[ "$VERBOSE_FLAG" -eq 1 ]]; then
    echo -e "${YLW}${BOLD}[v] VERBOSE MODE: Running tools in foreground, showing output...${NC}"
    (
        echo "[v] Starting subfinder..."
        subfinder -d "$DOMAIN" -all -o "$SUBF" &
        
        echo "[v] Starting findomain..."
        # --- FIX: Removed -q and -o, using stdout redirection ---
        # This is more compatible with different findomain versions.
        # stdout (subdomains) goes to the file.
        # stderr (banner/errors) goes to your screen.
        findomain -t "$DOMAIN" > "$FINDO" &
        wait
    )
    echo -e "${GRN}${BOLD}└── Passive enumeration complete.${NC}"
else
    (
        subfinder -d "$DOMAIN" -all -silent -o "$SUBF" > /dev/null 2>&1 &
        
        # --- FIX: Removed -q and -o, using stdout redirection ---
        # stdout (subdomains) goes to the file.
        # stderr (banner/errors) goes to /dev/null.
        findomain -t "$DOMAIN" > "$FINDO" 2>/dev/null &
        wait
    ) &
    spinner_with_updates $! "Passive Enumeration (subfinder + findomain)"
    echo -e "${GRN}${BOLD}└── Done.${NC}"
fi


# --- Show passive results ---
echo -e "\n${CYN}${BOLD}   Passive Tool Results:${NC}"
declare -A passive_sources
passive_sources["$SUBF"]="Subfinder"
passive_sources["$FINDO"]="Findomain"
for file in "${!passive_sources[@]}"; do
    if [[ -s "$file" ]]; then
        count=$(wc -l < "$file" | tr -d ' ')
        printf "   ${BLU}├── ${WHT}%-15s${NC}: %s results\n" "${passive_sources[$file]}" "$count"
    fi
done


# --- [MODIFIED BLOCK 2: Brute-force] ---
if [[ -n "$WORDLIST" && -n "$RESOLVERS" ]]; then
  stage "Running puredns for brute-force enumeration"
  if [[ "$VERBOSE_FLAG" -eq 1 ]]; then
      echo -e "${YLW}${BOLD}[v] VERBOSE MODE: Running puredns, showing output...${NC}"
      puredns bruteforce "$WORDLIST" "$DOMAIN" -r "$RESOLVERS" -w "$BRUTE" # No --quiet
  else
      (puredns bruteforce "$WORDLIST" "$DOMAIN" -r "$RESOLVERS" -w "$BRUTE" --quiet >/dev/null 2>&1) &
      spinner_with_updates $! "Brute-forcing"
  fi
  echo -e "${GRN}${BOLD}└── Done.${NC}"
fi


# --- Show brute-force results ---
echo -e "\n${CYN}${BOLD}   Brute-Force Tool Results:${NC}"
if [[ -s "$BRUTE" ]]; then
    count=$(wc -l < "$BRUTE" | tr -d ' ')
    printf "   ${BLU}├── ${WHT}%-15s${NC}: %s results\n" "PureDNS Brute" "$count"
fi


# --- [MODIFIED BLOCK 3: Merge] ---
stage "Merging initial results"
if [[ "$VERBOSE_FLAG" -eq 1 ]]; then
    echo -e "${YLW}${BOLD}[v] Merging results...${NC}"
    cat "$SUBF" "$FINDO" "$BRUTE" | sort -u > "$OUTPUT"
else
    (cat "$SUBF" "$FINDO" "$BRUTE" | sort -u > "$OUTPUT") &
    spinner_with_updates $! "Merging results"
fi
echo -e "${GRN}${BOLD}└── Done.${NC}"


# --- [MODIFIED BLOCK 4: Permutations] ---
if [[ "$PERMUTE_FLAG" -eq 1 ]]; then
  stage "Running permutations with alterx"
  if [[ "$VERBOSE_FLAG" -eq 1 ]]; then
      echo -e "${YLW}${BOLD}[v] Running alterx & dnsx, showing output...${NC}"
      cat "$OUTPUT" | alterx | dnsx | sort -u > "$PERMUTE_OUT"
  else
      (cat "$OUTPUT" | alterx -silent | dnsx -silent | sort -u > "$PERMUTE_OUT") &
      spinner_with_updates $! "Running alterx & dnsx"
  fi
  
  perm_count=$(wc -l < "$PERMUTE_OUT" | tr -d ' ')
  echo -e "${GRN}${BOLD}└── Found ${perm_count} potential permutations.${NC}"
  
  (cat "$PERMUTE_OUT" >> "$OUTPUT"; sort -u "$OUTPUT" -o "$OUTPUT") &
  spinner_with_updates $! "Merging permutation results"
  echo -e "${GRN}${BOLD}└── Done.${NC}"
fi


# --- [MODIFIED BLOCK 5: Smart Resolution] ---
stage "Optimizing resolution and checking live hosts"
if [[ "$VERBOSE_FLAG" -eq 1 ]]; then
    echo -e "${YLW}${BOLD}[v] Consolidating known-resolved...${NC}"
    cat "$BRUTE" "$PERMUTE_OUT" | sort -u > "$ALREADY_RESOLVED"
    
    echo -e "${YLW}${BOLD}[v] Finding domains that need resolution...${NC}"
    comm -23 <(sort "$OUTPUT") "$ALREADY_RESOLVED" > "$NEEDS_RESOLUTION"
    
    echo -e "${YLW}${BOLD}[v] Resolving remaining domains...${NC}"
    dnsx -l "$NEEDS_RESOLUTION" -o "$RESOLVED" # No -silent
    
    echo -e "${YLW}${BOLD}[v] Checking live hosts...${NC}"
    (cat "$RESOLVED" "$ALREADY_RESOLVED" | sort -u) | httpx -o "$LIVEOUT" # No -silent
    
    echo -e "${GRN}${BOLD}└── Resolution complete.${NC}"
else
    (cat "$BRUTE" "$PERMUTE_OUT" | sort -u > "$ALREADY_RESOLVED") &
    spinner_with_updates $! "Consolidating known-resolved"

    (comm -23 <(sort "$OUTPUT") "$ALREADY_RESOLVED" > "$NEEDS_RESOLUTION") &
    spinner_with_updates $! "Finding domains that need resolution"

    (dnsx -l "$NEEDS_RESOLUTION" -silent -o "$RESOLVED" > /dev/null 2>&1) &
    spinner_with_updates $! "Resolving remaining domains"

    ( (cat "$RESOLVED" "$ALREADY_RESOLVED" | sort -u) | httpx -silent -o "$LIVEOUT" > /dev/null 2>&1 ) &
    spinner_with_updates $! "Checking live hosts"
    echo -e "${GRN}${BOLD}└── Done.${NC}"
fi

# --- Summary ---
total=$(wc -l < "$OUTPUT" | tr -d ' ')
live=$(wc -l < "$LIVEOUT" | tr -d ' ')
duration=$(( SECONDS - start_time ))
summary "$total" "$live" "$OUTPUT" "$duration"
