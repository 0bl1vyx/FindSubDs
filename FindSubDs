#!/bin/bash

# --- Colors ---
# Using tput for compatibility and to avoid hardcoded escape sequences
RED=$(tput setaf 1)
GRN=$(tput setaf 2)
YLW=$(tput setaf 3)
BLU=$(tput setaf 4)
MAG=$(tput setaf 5)
CYN=$(tput setaf 6)
WHT=$(tput setaf 7)
BOLD=$(tput bold)
NC=$(tput sgr0) # No Color

# --- Tool Check ---
for tool in subfinder assetfinder sublist3r dnsx httpx findomain jq curl; do
  if ! command -v "$tool" >/dev/null 2>&1; then
    echo -e "${RED}${BOLD}[✘] Tool missing: ${tool}. Install it first.${NC}"
    exit 1
  fi
done

# --- UI Functions ---
spinner_with_updates() {
    local pid=$1
    local name=$2
    local spin=('⠋' '⠙' '⠹' '⠸' '⠼' '⠴' '⠦' '⠧' '⠇' '⠏')
    local i=0
    tput civis
    while kill -0 "$pid" 2>/dev/null; do
        printf "\r${MAG}${spin[$i]}${NC} ${BOLD}${name}...${NC}"
        i=$(( (i + 1) % 10 ))
        sleep 0.1
    done
    printf "\r$(tput el)" # Clear the line
    tput cnorm
}

banner() {
    echo -e "${BLU}${BOLD}"
    echo '    ┌─┐┬ ┬┌┐ ┌─┐┌┬┐┌─┐┌─┐┌─┐'
    echo '    ├─┤└┬┘├┴┐└─┐ │ ├─┘┌─┘┌─┘'
    echo '    ┴ ┴ ┴ └─┘└─┘ ┴ ┴  └─┘└─┘ v2.0'
    echo -e "          ${NC}${CYN}by 0bl1vyx${NC}"
}

stage() {
    echo -e "\n${BLU}${BOLD}[ ${WHT}⚙️  ${BLU}] ${WHT}${1}${NC}"
}

summary() {
    local total_subs=$1
    local live_subs=$2
    local output_file=$3
    local duration=$4

    echo -e "\n${GRN}${BOLD}╭───────────────────────────────────────────────────╮${NC}"
    echo -e "${GRN}${BOLD}│${NC}                ${WHT}🎉 Scan Summary 🎉${NC}                ${GRN}${BOLD}│${NC}"
    echo -e "${GRN}${BOLD}├───────────────────────────────────────────────────┤${NC}"
    echo -e "${GRN}${BOLD}│${NC} ${CYN}⏱️  Run time:${NC}        ${WHT}${duration} seconds${NC}"
    echo -e "${GRN}${BOLD}│${NC} ${CYN}📦 Total subdomains:${NC} ${WHT}${total_subs}${NC}"
    echo -e "${GRN}${BOLD}│${NC} ${CYN}🌐 Live subdomains:${NC}  ${WHT}${live_subs}${NC}"
    echo -e "${GRN}${BOLD}│${NC} ${CYN}💾 Output files:${NC}      ${YLW}${output_file}, ${LIVEOUT}${NC}"
    echo -e "${GRN}${BOLD}╰───────────────────────────────────────────────────╯${NC}\n"
}

# --- Argument Parsing ---
while getopts "d:o:l:" opt; do
  case $opt in
    d) DOMAIN=$OPTARG ;;
    o) OUTPUT=$OPTARG ;;
    l) LIVEOUT=$OPTARG ;;
    *) echo -e "${RED}${BOLD}[!] Usage: $0 -d domain.com -o output.txt -l live_output.txt${NC}" && exit 1 ;;
  esac
done

if [[ -z "$DOMAIN" || -z "$OUTPUT" || -z "$LIVEOUT" ]]; then
  echo -e "${RED}${BOLD}[!] Missing required arguments!${NC}"
  echo "Usage: $0 -d domain.com -o output.txt -l live_output.txt"
  exit 1
fi

if [[ -f "$OUTPUT" || -f "$LIVEOUT" ]]; then
  echo -e "${YLW}${BOLD}[!] Output file(s) already exist. Overwrite? [y/N]${NC}"
  read -r confirm
  if [[ "$confirm" != "y" && "$confirm" != "Y" ]]; then
    echo -e "${RED}${BOLD}[✘] Operation aborted by user.${NC}"
    exit 1
  fi
fi

# --- Main Execution ---
start_time=$SECONDS
clear
banner

echo -e "\n${WHT}${BOLD}TARGET:${NC} ${YLW}$DOMAIN${NC}"
echo -e "${WHT}${BOLD}OUTPUT:${NC} ${YLW}$OUTPUT${NC} | ${WHT}${BOLD}LIVE:${NC} ${YLW}$LIVEOUT${NC}"

# Temp files
SUBF=$(mktemp)
ASSET=$(mktemp)
SUBL=$(mktemp)
FINDO=$(mktemp)
CRT=$(mktemp)
WARCH=$(mktemp)
RESOLVED=$(mktemp)

trap 'rm -f "$SUBF" "$ASSET" "$SUBL" "$CRT" "$FINDO" "$WARCH" "$RESOLVED"; tput cnorm' EXIT

stage "Running enumeration tools in parallel"
(
  subfinder -d "$DOMAIN" -all -silent -o "$SUBF" > /dev/null 2>&1 &
  assetfinder --subs-only "$DOMAIN" > "$ASSET" 2>/dev/null &
  sublist3r -d "$DOMAIN" -o "$SUBL" > /dev/null 2>&1 &
  curl -s "https://crt.sh/?q=%25.${DOMAIN}&output=json" | jq -r '.[].name_value' 2>/dev/null | sed 's/\*\.//g' | sort -u > "$CRT" &
  findomain -t "$DOMAIN" -q > "$FINDO" 2>/dev/null &
  curl -s "http://web.archive.org/cdx/search/cdx?url=*.${DOMAIN}/*&output=text&fl=original&collapse=urlkey" | sed -e 's_https*://__' -e "s/\/.*//" -e 's/:.*//' -e 's/^www\.//' | sort -u > "$WARCH" &
  wait
) &
spinner_with_updates $! "Parallel Enumeration"
echo -e "${GRN}${BOLD}└── Done.${NC}"

# --- UX IMPROVEMENT: Tree-style progress report ---
echo -e "${CYN}${BOLD}   Individual Tool Results:${NC}"
declare -A sources
sources["$SUBF"]="Subfinder"
sources["$ASSET"]="Assetfinder"
sources["$SUBL"]="Sublist3r"
sources["$CRT"]="crt.sh"
sources["$FINDO"]="Findomain"
sources["$WARCH"]="Web Archive"
for file in "${!sources[@]}"; do
    if [[ -s "$file" ]]; then
        count=$(wc -l < "$file" | tr -d ' ')
        printf "   ${BLU}├── ${WHT}%-15s${NC}: %s results\n" "${sources[$file]}" "$count"
    fi
done

stage "Merging, resolving, and checking live hosts"
(cat "$SUBF" "$ASSET" "$SUBL" "$CRT" "$FINDO" "$WARCH" | sort -u > "$OUTPUT") &
spinner_with_updates $! "Merging results"
(dnsx -l "$OUTPUT" -silent -o "$RESOLVED" > /dev/null 2>&1) &
spinner_with_updates $! "Resolving domains"
(httpx -l "$RESOLVED" -silent -o "$LIVEOUT" > /dev/null 2>&1) &
spinner_with_updates $! "Checking live hosts"
echo -e "${GRN}${BOLD}└── Done.${NC}"

# --- Summary ---
total=$(wc -l < "$OUTPUT" | tr -d ' ')
live=$(wc -l < "$LIVEOUT" | tr -d ' ')
duration=$(( SECONDS - start_time ))
summary "$total" "$live" "$OUTPUT" "$duration"
